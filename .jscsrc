{
    "excludeFiles": [ "static/src/img/*" ],

    // Google Starts
    "requireCurlyBraces": [
        "if",
        "else",
        "for",
        "while",
        "do",
        "try",
        "catch"
    ],
    "requireOperatorBeforeLineBreak": true,
    // "requireCamelCaseOrUpperCaseIdentifiers": true,

    // ** not ready yet. will be there
    // "maximumLineLength": {
    //   "value": 80,
    //   "allowComments": true,
    //   "allowRegex": true
    // },

    "validateIndentation": 2,
    "validateQuoteMarks": "'",

    "disallowMultipleLineStrings": true,
    "disallowMixedSpacesAndTabs": true,
    "disallowTrailingWhitespace": true,
    "disallowSpaceAfterPrefixUnaryOperators": true,
    "disallowMultipleVarDecl": true,
    "disallowKeywordsOnNewLine": ["else"],

    "requireSpaceAfterKeywords": [
      "if",
      "else",
      "for",
      "while",
      "do",
      "switch",
      "return",
      "try",
      "catch"
    ],
    "requireSpaceBeforeBinaryOperators": [
        "=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=",
        "&=", "|=", "^=", "+=",

        "+", "-", "*", "/", "%", "<<", ">>", ">>>", "&",
        "|", "^", "&&", "||", "===", "==", ">=",
        "<=", "<", ">", "!=", "!=="
    ],
    "requireSpaceAfterBinaryOperators": true,
    "requireSpacesInConditionalExpression": true,
    "requireSpaceBeforeBlockStatements": true,
    "requireSpacesInForStatement": true,
    "requireLineFeedAtFileEnd": true,
    "requireSpacesInFunctionExpression": {
        "beforeOpeningCurlyBrace": true
    },
    // "disallowSpacesInAnonymousFunctionExpression": {
    //    "beforeOpeningRoundBrace": true
    // },
    "disallowSpacesInsideObjectBrackets": "all",
    "disallowSpacesInsideArrayBrackets": "all",
    "disallowSpacesInsideParentheses": true,

    // ** I'd like to use 2 lines as PEP8
    // "disallowMultipleLineBreaks": true,

    "disallowNewlineBeforeBlockStatements": true,
    // Google Ends

    "disallowEmptyBlocks": true,
    "disallowOperatorBeforeLineBreak": ["."],
    "disallowQuotedKeysInObjects": true,
    "disallowSpaceAfterObjectKeys": true,
    "disallowSpaceBeforePostfixUnaryOperators": true,
    "disallowSpacesInCallExpression": true,
    "disallowSpacesInFunctionDeclaration": {
        "beforeOpeningRoundBrace": true
    },

    // ** except { name: 'value' }
    "requireBlocksOnNewline": 1,

    // ** not ready yet. will be there
    // "requireCamelCaseOrUpperCaseIdentifiers": "ignoreProperties",

    "requireCapitalizedConstructors": true,
    "requireCommaBeforeLineBreak": true,
    "requireDotNotation": true,
    "requirePaddingNewlinesBeforeKeywords": [
        "do",
        "for",
        "if",
        // "else",
        "switch",
        "case",
        "try",
        "catch",
        "void",
        "while",
        "with",
        "return",
        "typeof",
        "function"
    ],

    // ** allow { name: 'value' } if it's short
    // "requirePaddingNewLinesInObjects": true,

    "requireParenthesesAroundIIFE": true,
    "requireSpaceAfterLineComment": true,
    "requireSpaceBeforeKeywords": [
        "else",
        "while",
        "catch"
    ],
    "requireSpaceBeforeObjectValues": true,
    "requireSpaceBetweenArguments": true,
    "requireSpacesInAnonymousFunctionExpression": {
        "beforeOpeningRoundBrace": true,
        "beforeOpeningCurlyBrace": true
    },
    "requireSpacesInForStatement": true,
    "requireSpacesInFunctionDeclaration": {
        "beforeOpeningCurlyBrace": true
    },
    "requireSpacesInFunctionExpression": {
        "beforeOpeningCurlyBrace": true
    },
    "requireSpacesInFunctionExpression": {
        "beforeOpeningRoundBrace": true,
        "beforeOpeningCurlyBrace": true
    },
    "safeContextKeyword": ["that"],
    "validateParameterSeparator": ", "
}
